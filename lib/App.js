// Packages
import readline from 'readline';
import fs from 'fs';
import keyMirror from 'keymirror';
import _ from 'lodash';
import Table from 'cli-table';
import jsonFormat from 'json-format';

import Flight from './Flight';
import { Aircraft, Passenger, Route } from './models';
import { MODEL_TYPES } from './constants';

export default class App {

	static checkIfFileExists(filePath, callback) {
		fs.stat(filePath, (err) => {
			if (err) {
				if (err.code === 'ENOENT') {
					callback(new Error('Commands file does not exist'));
					return;
				}
				callback(err);
				return 
			}

			callback(null);
		});
	}

	static readInputFileByLines(filePath, done) {
		// this method reads the file line by line
		// and stores them into an array
		const lineReader = readline.createInterface({
			input: fs.createReadStream(filePath)
		});
		const lines = [];

		lineReader.on('line', (line) => {
			lines.push(line);
		});

		lineReader.on('close', () => {
			_.isFunction(done) && done(null, lines);
		});
	}

	static parseCommand(line) {
		// this method produces js object from a give command line
		// for example this: add aircraft Gulfstream-G550 8
		// will be transformed into { action: 'add', model: 'aircraft', options: ['Gulfstream-G550', '8'] }
		const [action, model, ...options] = line.split(' ');

		return {action, model, options};
	}

	static parseCommands(lines) {
		return _.map(lines, this.parseCommand);
	}

	static formFlightObject(commands) {
		// this method takes commands generated by previos method,
		// creates the Flight object and fills it with initialised
		// Route, Aircraft and Passengers
		const flight = new Flight();

		return _.reduce(commands, (flightObject, command) => {
			switch(command.model){
				case MODEL_TYPES.route:
					flightObject.route = new Route(...command.options);
					break;
				case MODEL_TYPES.aircraft:
					flightObject.aircraft = new Aircraft(...command.options);
					break;
				case MODEL_TYPES.passenger:
					flightObject.addPassenger(new Passenger(...command.options));
					break;
			}

			return flightObject;
		}, flight);
	}

	static printReport(report) {
		const table = new Table();

		_.each(_.toPairs(report), (row) => {
			// converts boolean values to YES or NO and transforms keys to a readable format
			const [key, value] = row;

			table.push([_.startCase(key), _.isBoolean(value) ? !!value ? 'YES' : 'NO' : value]);
		});
		
		console.log('\nFlight summary report:\n');
		console.log(table.toString());
	}

	static writeReportToFile(report, filePath, callback) {
		const indentationFormat = {
			type: 'space',
			size: 2
		};

		fs.writeFile(filePath, jsonFormat(report, indentationFormat), callback);
	}
}
