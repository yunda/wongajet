'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Packages


var _readline = require('readline');

var _readline2 = _interopRequireDefault(_readline);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _keymirror = require('keymirror');

var _keymirror2 = _interopRequireDefault(_keymirror);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _cliTable = require('cli-table');

var _cliTable2 = _interopRequireDefault(_cliTable);

var _jsonFormat = require('json-format');

var _jsonFormat2 = _interopRequireDefault(_jsonFormat);

var _Flight = require('./Flight');

var _Flight2 = _interopRequireDefault(_Flight);

var _models = require('./models');

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var App = function () {
	function App() {
		_classCallCheck(this, App);
	}

	_createClass(App, null, [{
		key: 'checkIfFileExists',
		value: function checkIfFileExists(filePath, callback) {
			_fs2.default.stat(filePath, function (err) {
				if (err) {
					if (err.code === 'ENOENT') {
						callback(new Error('Commands file does not exist'));
						return;
					}
					callback(err);
					return;
				}

				callback(null);
			});
		}
	}, {
		key: 'readInputFileByLines',
		value: function readInputFileByLines(filePath, done) {
			// this method reads the file line by line
			// and stores them into an array
			var lineReader = _readline2.default.createInterface({
				input: _fs2.default.createReadStream(filePath)
			});
			var lines = [];

			lineReader.on('line', function (line) {
				lines.push(line);
			});

			lineReader.on('close', function () {
				_lodash2.default.isFunction(done) && done(null, lines);
			});
		}
	}, {
		key: 'parseCommand',
		value: function parseCommand(line) {
			// this method produces js object from a give command line
			// for example this: add aircraft Gulfstream-G550 8
			// will be transformed into { action: 'add', model: 'aircraft', options: ['Gulfstream-G550', '8'] }
			var _line$split = line.split(' '),
			    _line$split2 = _toArray(_line$split),
			    action = _line$split2[0],
			    model = _line$split2[1],
			    options = _line$split2.slice(2);

			return { action: action, model: model, options: options };
		}
	}, {
		key: 'parseCommands',
		value: function parseCommands(lines) {
			return _lodash2.default.map(lines, this.parseCommand);
		}
	}, {
		key: 'formFlightObject',
		value: function formFlightObject(commands) {
			// this method takes commands generated by previos method,
			// creates the Flight object and fills it with initialised
			// Route, Aircraft and Passengers
			var flight = new _Flight2.default();

			return _lodash2.default.reduce(commands, function (flightObject, command) {
				switch (command.model) {
					case _constants.MODEL_TYPES.route:
						flightObject.route = new (Function.prototype.bind.apply(_models.Route, [null].concat(_toConsumableArray(command.options))))();
						break;
					case _constants.MODEL_TYPES.aircraft:
						flightObject.aircraft = new (Function.prototype.bind.apply(_models.Aircraft, [null].concat(_toConsumableArray(command.options))))();
						break;
					case _constants.MODEL_TYPES.passenger:
						flightObject.addPassenger(new (Function.prototype.bind.apply(_models.Passenger, [null].concat(_toConsumableArray(command.options))))());
						break;
				}

				return flightObject;
			}, flight);
		}
	}, {
		key: 'printReport',
		value: function printReport(report) {
			var table = new _cliTable2.default();

			_lodash2.default.each(_lodash2.default.toPairs(report), function (row) {
				// converts boolean values to YES or NO and transforms keys to a readable format
				var _row = _slicedToArray(row, 2),
				    key = _row[0],
				    value = _row[1];

				table.push([_lodash2.default.startCase(key), _lodash2.default.isBoolean(value) ? !!value ? 'YES' : 'NO' : value]);
			});

			console.log('\nFlight summary report:\n');
			console.log(table.toString());
		}
	}, {
		key: 'writeReportToFile',
		value: function writeReportToFile(report, filePath, callback) {
			var indentationFormat = {
				type: 'space',
				size: 2
			};

			_fs2.default.writeFile(filePath, (0, _jsonFormat2.default)(report, indentationFormat), callback);
		}
	}]);

	return App;
}();

exports.default = App;